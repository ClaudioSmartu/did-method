// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/agent_api.proto

package protov1

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Available processing operations.
type ProcessRequest_Task int32

const (
	ProcessRequest_TASK_PUBLISH    ProcessRequest_Task = 0
	ProcessRequest_TASK_DEACTIVATE ProcessRequest_Task = 1
)

var ProcessRequest_Task_name = map[int32]string{
	0: "TASK_PUBLISH",
	1: "TASK_DEACTIVATE",
}

var ProcessRequest_Task_value = map[string]int32{
	"TASK_PUBLISH":    0,
	"TASK_DEACTIVATE": 1,
}

func (x ProcessRequest_Task) String() string {
	return proto.EnumName(ProcessRequest_Task_name, int32(x))
}

func (ProcessRequest_Task) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_46a17c9b2763eb59, []int{3, 0}
}

type PingResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResponse) Reset()      { *m = PingResponse{} }
func (*PingResponse) ProtoMessage() {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46a17c9b2763eb59, []int{0}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func (m *PingResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type QueryRequest struct {
	// DID method.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// DID subject.
	Subject              string   `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryRequest) Reset()      { *m = QueryRequest{} }
func (*QueryRequest) ProtoMessage() {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46a17c9b2763eb59, []int{1}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *QueryRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

type QueryResponse struct {
	// JSON-encoded DID document.
	Document             []byte   `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryResponse) Reset()      { *m = QueryResponse{} }
func (*QueryResponse) ProtoMessage() {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46a17c9b2763eb59, []int{2}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetDocument() []byte {
	if m != nil {
		return m.Document
	}
	return nil
}

type ProcessRequest struct {
	Task                 ProcessRequest_Task `protobuf:"varint,1,opt,name=task,proto3,enum=bryk.did.proto.v1.ProcessRequest_Task" json:"task,omitempty"`
	Ticket               *Ticket             `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProcessRequest) Reset()      { *m = ProcessRequest{} }
func (*ProcessRequest) ProtoMessage() {}
func (*ProcessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46a17c9b2763eb59, []int{3}
}
func (m *ProcessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessRequest.Merge(m, src)
}
func (m *ProcessRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessRequest proto.InternalMessageInfo

func (m *ProcessRequest) GetTask() ProcessRequest_Task {
	if m != nil {
		return m.Task
	}
	return ProcessRequest_TASK_PUBLISH
}

func (m *ProcessRequest) GetTicket() *Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

type ProcessResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessResponse) Reset()      { *m = ProcessResponse{} }
func (*ProcessResponse) ProtoMessage() {}
func (*ProcessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46a17c9b2763eb59, []int{4}
}
func (m *ProcessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessResponse.Merge(m, src)
}
func (m *ProcessResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessResponse proto.InternalMessageInfo

func (m *ProcessResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterEnum("bryk.did.proto.v1.ProcessRequest_Task", ProcessRequest_Task_name, ProcessRequest_Task_value)
	proto.RegisterType((*PingResponse)(nil), "bryk.did.proto.v1.PingResponse")
	proto.RegisterType((*QueryRequest)(nil), "bryk.did.proto.v1.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "bryk.did.proto.v1.QueryResponse")
	proto.RegisterType((*ProcessRequest)(nil), "bryk.did.proto.v1.ProcessRequest")
	proto.RegisterType((*ProcessResponse)(nil), "bryk.did.proto.v1.ProcessResponse")
}

func init() { proto.RegisterFile("proto/v1/agent_api.proto", fileDescriptor_46a17c9b2763eb59) }

var fileDescriptor_46a17c9b2763eb59 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xb1, 0x6f, 0xd3, 0x4e,
	0x14, 0xee, 0xf9, 0xd7, 0x5f, 0x1b, 0xae, 0x69, 0x9b, 0x5e, 0x51, 0x15, 0x8c, 0x74, 0x6d, 0x3d,
	0x00, 0x02, 0xf5, 0x2c, 0x87, 0x01, 0xa9, 0x13, 0x09, 0x89, 0x44, 0x04, 0x83, 0xeb, 0x86, 0x0c,
	0x28, 0x52, 0xe5, 0xc4, 0x87, 0x73, 0x84, 0xf8, 0x8c, 0x7d, 0x8e, 0x14, 0x55, 0x95, 0x10, 0x23,
	0x2b, 0xff, 0x01, 0x13, 0x62, 0x60, 0x66, 0x60, 0x60, 0x44, 0x4c, 0x48, 0x2c, 0x8c, 0x8d, 0xc5,
	0x1f, 0xc0, 0xc8, 0x88, 0x7c, 0xbe, 0x44, 0x85, 0x06, 0xd8, 0xfc, 0xbe, 0xfb, 0xbe, 0xf7, 0x3d,
	0xbf, 0xef, 0xc1, 0x72, 0x18, 0x71, 0xc1, 0xcd, 0x91, 0x65, 0xba, 0x3e, 0x0d, 0xc4, 0x91, 0x1b,
	0x32, 0x22, 0x21, 0xb4, 0xd1, 0x8d, 0xc6, 0x03, 0xe2, 0x31, 0x2f, 0xaf, 0xc9, 0xc8, 0xd2, 0x6f,
	0xf9, 0x4c, 0xf4, 0x93, 0x2e, 0xe9, 0xf1, 0xa1, 0xe9, 0x73, 0x9f, 0x9b, 0x3e, 0xe7, 0xfe, 0x13,
	0xea, 0x86, 0x2c, 0x56, 0x9f, 0xa6, 0x1b, 0x32, 0xd3, 0x0d, 0x02, 0x2e, 0x5c, 0xc1, 0x78, 0x10,
	0xe7, 0x5a, 0x7d, 0xef, 0x77, 0xa1, 0x84, 0xbb, 0xc9, 0x23, 0x59, 0xe5, 0x23, 0x64, 0x5f, 0x8a,
	0x7e, 0x59, 0x35, 0x9b, 0xb1, 0xe8, 0x30, 0x14, 0x63, 0xf5, 0xb8, 0x39, 0x9b, 0x78, 0xe8, 0xb2,
	0x20, 0x07, 0x0d, 0x0c, 0x8b, 0x36, 0x0b, 0x7c, 0x87, 0xc6, 0x21, 0x0f, 0x62, 0x8a, 0xd6, 0xa0,
	0xc6, 0x07, 0x65, 0xb0, 0x03, 0xae, 0x15, 0x1c, 0x8d, 0x0f, 0x8c, 0xdb, 0xb0, 0x78, 0x90, 0xd0,
	0x68, 0xec, 0xd0, 0xa7, 0x09, 0x8d, 0x05, 0xda, 0x82, 0x4b, 0x43, 0x2a, 0xfa, 0xdc, 0x93, 0x9c,
	0x0b, 0x8e, 0xaa, 0x50, 0x19, 0x2e, 0xc7, 0x49, 0xf7, 0x31, 0xed, 0x89, 0xb2, 0x26, 0x1f, 0xa6,
	0xa5, 0x71, 0x03, 0xae, 0xaa, 0x0e, 0xca, 0x42, 0x87, 0x05, 0x8f, 0xf7, 0x92, 0x21, 0x0d, 0x84,
	0x6c, 0x52, 0x74, 0x66, 0xb5, 0xf1, 0x16, 0xc0, 0x35, 0x3b, 0xe2, 0x3d, 0x1a, 0xc7, 0x53, 0xc7,
	0x7d, 0xb8, 0x28, 0xdc, 0x38, 0x9f, 0x69, 0xad, 0x72, 0x85, 0x9c, 0xdb, 0x2e, 0xf9, 0x55, 0x40,
	0x5a, 0x6e, 0x3c, 0x70, 0xa4, 0x06, 0x59, 0x70, 0x49, 0xb0, 0xde, 0x80, 0xe6, 0x43, 0xad, 0x54,
	0x2e, 0xcd, 0x51, 0xb7, 0x24, 0xc1, 0x51, 0x44, 0x63, 0x0f, 0x2e, 0x66, 0x0d, 0x50, 0x09, 0x16,
	0x5b, 0xd5, 0xc3, 0x7b, 0x47, 0xf6, 0x83, 0xda, 0xfd, 0xe6, 0xe1, 0xdd, 0xd2, 0x02, 0xda, 0x84,
	0xeb, 0x12, 0xa9, 0x37, 0xaa, 0x77, 0x5a, 0xcd, 0x76, 0xb5, 0xd5, 0x28, 0x01, 0x63, 0x17, 0xae,
	0xcf, 0xec, 0xe7, 0xaf, 0xb0, 0xf2, 0x5e, 0x83, 0x85, 0x6a, 0x76, 0x23, 0x55, 0xbb, 0x89, 0x0e,
	0xe0, 0x62, 0xb6, 0x6f, 0xb4, 0x45, 0xf2, 0xa8, 0xc8, 0x34, 0x2a, 0xd2, 0xc8, 0xa2, 0xd2, 0xb7,
	0xe7, 0xfd, 0xdf, 0x99, 0x80, 0x8c, 0xd2, 0xf3, 0x2f, 0xdf, 0x5e, 0x6a, 0x10, 0x15, 0xb2, 0x20,
	0xc3, 0xac, 0x55, 0x1f, 0x2e, 0xab, 0x11, 0xd0, 0xee, 0x3f, 0xb7, 0xa3, 0x1b, 0x7f, 0xa3, 0x28,
	0x8f, 0x2d, 0xe9, 0x51, 0x32, 0x56, 0xa4, 0x47, 0xfe, 0xb8, 0x0f, 0xae, 0xa3, 0x18, 0xfe, 0x2f,
	0xa3, 0x44, 0xf3, 0xa6, 0x3c, 0x7b, 0x26, 0xfa, 0xce, 0x9f, 0x09, 0xca, 0xe3, 0xaa, 0xf4, 0xd8,
	0x45, 0xdb, 0x99, 0x47, 0x44, 0x45, 0xc4, 0xe8, 0x88, 0x9a, 0xc7, 0xf9, 0x39, 0x9d, 0x98, 0xc7,
	0xea, 0x7c, 0x4e, 0x6a, 0x2f, 0xc0, 0xd7, 0x09, 0x5e, 0x38, 0x9d, 0x60, 0xf0, 0x7d, 0x82, 0xc1,
	0x8f, 0x09, 0x06, 0xcf, 0x52, 0x0c, 0x5e, 0xa7, 0x18, 0xbc, 0x4b, 0x31, 0xf8, 0x90, 0x62, 0xf0,
	0x31, 0xc5, 0xe0, 0x73, 0x8a, 0xc1, 0x69, 0x8a, 0x01, 0xbc, 0xc8, 0xf8, 0x79, 0xef, 0xda, 0x6a,
	0x1e, 0x40, 0xc8, 0xec, 0x0c, 0xb1, 0xc1, 0xc3, 0x65, 0xf9, 0x34, 0xb2, 0x5e, 0x69, 0xff, 0xd5,
	0xea, 0xf6, 0x1b, 0x6d, 0xa3, 0x96, 0x69, 0xea, 0xcc, 0x23, 0x92, 0x41, 0xda, 0xd6, 0xa7, 0x1c,
	0xeb, 0xd4, 0x99, 0xd7, 0x91, 0x58, 0xa7, 0x6d, 0x75, 0x97, 0xa4, 0xec, 0xe6, 0xcf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x4c, 0x76, 0xfc, 0x27, 0xfe, 0x03, 0x00, 0x00,
}

func (this *PingResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *PingResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *PingResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *PingResponse but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *PingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *QueryRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryRequest)
	if !ok {
		that2, ok := that.(QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryRequest but is not nil && this == nil")
	}
	if this.Method != that1.Method {
		return fmt.Errorf("Method this(%v) Not Equal that(%v)", this.Method, that1.Method)
	}
	if this.Subject != that1.Subject {
		return fmt.Errorf("Subject this(%v) Not Equal that(%v)", this.Subject, that1.Subject)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *QueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryRequest)
	if !ok {
		that2, ok := that.(QueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *QueryResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*QueryResponse)
	if !ok {
		that2, ok := that.(QueryResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *QueryResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *QueryResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *QueryResponse but is not nil && this == nil")
	}
	if !bytes.Equal(this.Document, that1.Document) {
		return fmt.Errorf("Document this(%v) Not Equal that(%v)", this.Document, that1.Document)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *QueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryResponse)
	if !ok {
		that2, ok := that.(QueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Document, that1.Document) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProcessRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ProcessRequest)
	if !ok {
		that2, ok := that.(ProcessRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ProcessRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ProcessRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ProcessRequest but is not nil && this == nil")
	}
	if this.Task != that1.Task {
		return fmt.Errorf("Task this(%v) Not Equal that(%v)", this.Task, that1.Task)
	}
	if !this.Ticket.Equal(that1.Ticket) {
		return fmt.Errorf("Ticket this(%v) Not Equal that(%v)", this.Ticket, that1.Ticket)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ProcessRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessRequest)
	if !ok {
		that2, ok := that.(ProcessRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Task != that1.Task {
		return false
	}
	if !this.Ticket.Equal(that1.Ticket) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProcessResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ProcessResponse)
	if !ok {
		that2, ok := that.(ProcessResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ProcessResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ProcessResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ProcessResponse but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ProcessResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessResponse)
	if !ok {
		that2, ok := that.(ProcessResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protov1.PingResponse{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protov1.QueryRequest{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protov1.QueryResponse{")
	s = append(s, "Document: "+fmt.Sprintf("%#v", this.Document)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protov1.ProcessRequest{")
	s = append(s, "Task: "+fmt.Sprintf("%#v", this.Task)+",\n")
	if this.Ticket != nil {
		s = append(s, "Ticket: "+fmt.Sprintf("%#v", this.Ticket)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protov1.ProcessResponse{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAgentApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgentAPIClient is the client API for AgentAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentAPIClient interface {
	// Reachability test.
	Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PingResponse, error)
	// Process an incoming request ticket.
	Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error)
	// Return the current state of a DID subject.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type agentAPIClient struct {
	cc *grpc.ClientConn
}

func NewAgentAPIClient(cc *grpc.ClientConn) AgentAPIClient {
	return &agentAPIClient{cc}
}

func (c *agentAPIClient) Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/bryk.did.proto.v1.AgentAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) Process(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, "/bryk.did.proto.v1.AgentAPI/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/bryk.did.proto.v1.AgentAPI/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentAPIServer is the server API for AgentAPI service.
type AgentAPIServer interface {
	// Reachability test.
	Ping(context.Context, *types.Empty) (*PingResponse, error)
	// Process an incoming request ticket.
	Process(context.Context, *ProcessRequest) (*ProcessResponse, error)
	// Return the current state of a DID subject.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
}

// UnimplementedAgentAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAgentAPIServer struct {
}

func (*UnimplementedAgentAPIServer) Ping(ctx context.Context, req *types.Empty) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedAgentAPIServer) Process(ctx context.Context, req *ProcessRequest) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (*UnimplementedAgentAPIServer) Query(ctx context.Context, req *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func RegisterAgentAPIServer(s *grpc.Server, srv AgentAPIServer) {
	s.RegisterService(&_AgentAPI_serviceDesc, srv)
}

func _AgentAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bryk.did.proto.v1.AgentAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Ping(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bryk.did.proto.v1.AgentAPI/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Process(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bryk.did.proto.v1.AgentAPI/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bryk.did.proto.v1.AgentAPI",
	HandlerType: (*AgentAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AgentAPI_Ping_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _AgentAPI_Process_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _AgentAPI_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/agent_api.proto",
}

func (m *PingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintAgentApi(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Method) > 0 {
		i -= len(m.Method)
		copy(dAtA[i:], m.Method)
		i = encodeVarintAgentApi(dAtA, i, uint64(len(m.Method)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Document) > 0 {
		i -= len(m.Document)
		copy(dAtA[i:], m.Document)
		i = encodeVarintAgentApi(dAtA, i, uint64(len(m.Document)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ticket != nil {
		{
			size, err := m.Ticket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Task != 0 {
		i = encodeVarintAgentApi(dAtA, i, uint64(m.Task))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgentApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgentApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPingResponse(r randyAgentApi, easy bool) *PingResponse {
	this := &PingResponse{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAgentApi(r, 2)
	}
	return this
}

func NewPopulatedQueryRequest(r randyAgentApi, easy bool) *QueryRequest {
	this := &QueryRequest{}
	this.Method = string(randStringAgentApi(r))
	this.Subject = string(randStringAgentApi(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAgentApi(r, 3)
	}
	return this
}

func NewPopulatedQueryResponse(r randyAgentApi, easy bool) *QueryResponse {
	this := &QueryResponse{}
	v1 := r.Intn(100)
	this.Document = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Document[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAgentApi(r, 2)
	}
	return this
}

func NewPopulatedProcessRequest(r randyAgentApi, easy bool) *ProcessRequest {
	this := &ProcessRequest{}
	this.Task = ProcessRequest_Task([]int32{0, 1}[r.Intn(2)])
	if r.Intn(5) != 0 {
		this.Ticket = NewPopulatedTicket(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAgentApi(r, 3)
	}
	return this
}

func NewPopulatedProcessResponse(r randyAgentApi, easy bool) *ProcessResponse {
	this := &ProcessResponse{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAgentApi(r, 2)
	}
	return this
}

type randyAgentApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAgentApi(r randyAgentApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAgentApi(r randyAgentApi) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneAgentApi(r)
	}
	return string(tmps)
}
func randUnrecognizedAgentApi(r randyAgentApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAgentApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAgentApi(dAtA []byte, r randyAgentApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAgentApi(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateAgentApi(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateAgentApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAgentApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAgentApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAgentApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAgentApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovAgentApi(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovAgentApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Document)
	if l > 0 {
		n += 1 + l + sovAgentApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != 0 {
		n += 1 + sovAgentApi(uint64(m.Task))
	}
	if m.Ticket != nil {
		l = m.Ticket.Size()
		n += 1 + l + sovAgentApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAgentApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgentApi(x uint64) (n int) {
	return sovAgentApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingResponse{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryRequest{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueryResponse{`,
		`Document:` + fmt.Sprintf("%v", this.Document) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessRequest{`,
		`Task:` + fmt.Sprintf("%v", this.Task) + `,`,
		`Ticket:` + strings.Replace(fmt.Sprintf("%v", this.Ticket), "Ticket", "Ticket", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessResponse{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAgentApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Document = append(m.Document[:0], dAtA[iNdEx:postIndex]...)
			if m.Document == nil {
				m.Document = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			m.Task = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Task |= ProcessRequest_Task(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ticket == nil {
				m.Ticket = &Ticket{}
			}
			if err := m.Ticket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgentApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgentApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgentApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgentApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgentApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgentApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgentApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgentApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgentApi = fmt.Errorf("proto: unexpected end of group")
)
