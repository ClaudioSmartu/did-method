// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/v1/main.proto

package protov1

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Ticket required for write operations.
type Ticket struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NonceValue           int64    `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	KeyId                string   `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Content              []byte   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ticket) Reset()      { *m = Ticket{} }
func (*Ticket) ProtoMessage() {}
func (*Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0240fe89452eabb, []int{0}
}
func (m *Ticket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket.Merge(m, src)
}
func (m *Ticket) XXX_Size() int {
	return m.Size()
}
func (m *Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket proto.InternalMessageInfo

func (m *Ticket) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Ticket) GetNonceValue() int64 {
	if m != nil {
		return m.NonceValue
	}
	return 0
}

func (m *Ticket) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *Ticket) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Ticket) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Ticket)(nil), "bryk.did.proto.v1.Ticket")
}

func init() { proto.RegisterFile("proto/v1/main.proto", fileDescriptor_e0240fe89452eabb) }

var fileDescriptor_e0240fe89452eabb = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4b, 0xf3, 0x40,
	0x18, 0xc7, 0xdf, 0xa7, 0x7d, 0xdb, 0xd2, 0xe3, 0xe5, 0x85, 0xe6, 0x7d, 0x85, 0x50, 0xe5, 0x2c,
	0xe2, 0xd0, 0xc5, 0x84, 0xe0, 0xe0, 0x1e, 0xba, 0x38, 0x28, 0x25, 0x48, 0x07, 0x29, 0xc8, 0x25,
	0x39, 0xe3, 0x91, 0xe6, 0x2e, 0x34, 0x97, 0x42, 0x36, 0x27, 0xbf, 0x84, 0x9b, 0x93, 0xf8, 0x09,
	0x1c, 0x1d, 0xc5, 0xc9, 0xd1, 0x49, 0x9a, 0xfb, 0x04, 0x8e, 0x8e, 0x92, 0x4b, 0xb5, 0xa0, 0xdb,
	0xf3, 0xfb, 0xfd, 0xff, 0xcf, 0x3d, 0x70, 0xe8, 0x5f, 0x3a, 0x17, 0x52, 0xd8, 0x0b, 0xc7, 0x4e,
	0x08, 0xe3, 0x96, 0x26, 0xa3, 0xe7, 0xcf, 0x8b, 0xd8, 0x0a, 0x59, 0x58, 0xb3, 0xb5, 0x70, 0xfa,
	0x07, 0x11, 0x93, 0x17, 0xb9, 0x6f, 0x05, 0x22, 0xb1, 0x23, 0x11, 0x09, 0x3b, 0x12, 0x22, 0x9a,
	0x51, 0x92, 0xb2, 0x6c, 0x35, 0xda, 0x24, 0x65, 0x36, 0xe1, 0x5c, 0x48, 0x22, 0x99, 0xe0, 0x59,
	0xbd, 0xdb, 0xdf, 0xfb, 0xbe, 0xa8, 0xb5, 0x9f, 0x9f, 0x6b, 0xaa, 0xaf, 0x57, 0xd3, 0xaa, 0xbe,
	0xb9, 0x7a, 0xec, 0xab, 0x45, 0x93, 0x54, 0x16, 0x75, 0xb8, 0x73, 0x0d, 0xa8, 0x7d, 0xc2, 0x82,
	0x98, 0x4a, 0x63, 0x0b, 0x75, 0x25, 0x4b, 0x68, 0x26, 0x49, 0x92, 0x9a, 0x30, 0x80, 0x61, 0xd3,
	0x5b, 0x0b, 0x63, 0x17, 0xb5, 0xb8, 0xe0, 0x01, 0x35, 0x1b, 0x55, 0xe2, 0xfe, 0x55, 0xaf, 0xdb,
	0xe8, 0xb8, 0x12, 0x13, 0x32, 0xcb, 0xa9, 0x57, 0x87, 0xc6, 0x06, 0x6a, 0xc7, 0xb4, 0x38, 0x63,
	0xa1, 0xd9, 0x1c, 0xc0, 0xb0, 0xeb, 0xb5, 0x62, 0x5a, 0x1c, 0x86, 0x86, 0x89, 0x3a, 0x81, 0xe0,
	0x92, 0x72, 0x69, 0xfe, 0x1e, 0xc0, 0xf0, 0x8f, 0xf7, 0x89, 0xd5, 0xd1, 0x8c, 0x45, 0x9c, 0xc8,
	0x7c, 0x4e, 0xcd, 0x96, 0xce, 0xd6, 0xc2, 0xbd, 0x82, 0x97, 0x12, 0xff, 0x5a, 0x96, 0x18, 0xde,
	0x4a, 0x0c, 0xef, 0x25, 0x86, 0x4b, 0x85, 0xe1, 0x56, 0x61, 0xb8, 0x57, 0x18, 0x1e, 0x14, 0x86,
	0x47, 0x85, 0xe1, 0x59, 0x61, 0x58, 0x2a, 0x0c, 0xe8, 0x3f, 0x13, 0xd6, 0x8f, 0x7f, 0x76, 0xbb,
	0x47, 0x84, 0xf1, 0x71, 0x45, 0x63, 0x38, 0xed, 0x68, 0xbd, 0x70, 0x6e, 0x1a, 0x4d, 0x77, 0x34,
	0xbe, 0x6b, 0xf4, 0xdc, 0xaa, 0x3f, 0x62, 0xa1, 0xa5, 0x1b, 0xd6, 0xc4, 0x79, 0xaa, 0xdd, 0x74,
	0xc4, 0xc2, 0xa9, 0x76, 0xd3, 0x89, 0xe3, 0xb7, 0xf5, 0xda, 0xfe, 0x47, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x5f, 0xf7, 0xef, 0xa3, 0xdc, 0x01, 0x00, 0x00,
}

func (this *Ticket) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Ticket)
	if !ok {
		that2, ok := that.(Ticket)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Ticket")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Ticket but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Ticket but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.NonceValue != that1.NonceValue {
		return fmt.Errorf("NonceValue this(%v) Not Equal that(%v)", this.NonceValue, that1.NonceValue)
	}
	if this.KeyId != that1.KeyId {
		return fmt.Errorf("KeyId this(%v) Not Equal that(%v)", this.KeyId, that1.KeyId)
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Ticket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ticket)
	if !ok {
		that2, ok := that.(Ticket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.NonceValue != that1.NonceValue {
		return false
	}
	if this.KeyId != that1.KeyId {
		return false
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Ticket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&protov1.Ticket{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "NonceValue: "+fmt.Sprintf("%#v", this.NonceValue)+",\n")
	s = append(s, "KeyId: "+fmt.Sprintf("%#v", this.KeyId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMain(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Ticket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ticket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMain(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMain(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintMain(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NonceValue != 0 {
		i = encodeVarintMain(dAtA, i, uint64(m.NonceValue))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintMain(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMain(dAtA []byte, offset int, v uint64) int {
	offset -= sovMain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedTicket(r randyMain, easy bool) *Ticket {
	this := &Ticket{}
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.NonceValue = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.NonceValue *= -1
	}
	this.KeyId = string(randStringMain(r))
	v1 := r.Intn(100)
	this.Content = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Content[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.Signature = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMain(r, 6)
	}
	return this
}

type randyMain interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMain(r randyMain) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMain(r randyMain) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneMain(r)
	}
	return string(tmps)
}
func randUnrecognizedMain(r randyMain, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMain(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMain(dAtA []byte, r randyMain, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateMain(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMain(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMain(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Ticket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovMain(uint64(m.Timestamp))
	}
	if m.NonceValue != 0 {
		n += 1 + sovMain(uint64(m.NonceValue))
	}
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMain(x uint64) (n int) {
	return sovMain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Ticket) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ticket{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`NonceValue:` + fmt.Sprintf("%v", this.NonceValue) + `,`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMain(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Ticket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ticket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ticket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceValue", wireType)
			}
			m.NonceValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonceValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMain = fmt.Errorf("proto: unexpected end of group")
)
