syntax = "proto3";

package io.bryk.did;

option (gogoproto.benchgen_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.gostring_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.populate_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.stringer_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.verbose_equal_all) = true;
// Go configuration
option go_package = "didpb";
option java_multiple_files = true;
option java_outer_classname = "MainProto";
// Java configuration
option java_package = "com.io.bryk.did";

// Add support for gRPC Gateway
import "github.com/gogo/googleapis/google/api/annotations.proto";
// GoGo proto extensions
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
// Common types
// vendor/github.com/gogo/protobuf/types
import "google/protobuf/empty.proto";
// Local types
import "proto/document.proto";

// Generic ping response
message Pong {
  bool ok = 1;
}

// Ticket required for write operations
message Ticket {
  int64 timestamp = 1;
  int64 nonce = 2 [(gogoproto.customname) = "NonceValue"];
  string key_id = 3;
  bytes content = 4;
  bytes signature = 5;
}

// Write operation submitted for processing
message Request {
  enum Task {
    PUBLISH = 0;
    DEACTIVATE = 1;
  }
  Task task = 1;
  Ticket ticket = 2;
}

// Result of the processing request
message ProcessResponse {
  bool ok = 1;
}

// Read operation; retrieve the contents of a DID based on its subject string
message Query {
  string subject = 1;
}

// Retrieve operation response
message Response {
  Document document = 1;
  bytes source = 2;
}

// AgentAPI defines the network protocol as detailed in the DID Method specification.
service AgentAPI {
  // Reachability test.
  rpc Ping(google.protobuf.Empty) returns (Pong) {
    option (google.api.http) = {
      get: "/v1/ping"
    };
  }
  // Process an incoming request ticket.
  rpc Process(Request) returns (ProcessResponse) {
    option (google.api.http) = {
      post: "/v1/process"
      body: "*"
    };
  }
  // Return the current state of a DID subject.
  rpc Retrieve(Query) returns (Response) {
    option (google.api.http) = {
      get: "/v1/retrieve/{subject}"
      response_body: "document"
      additional_bindings: {
        get: "/v1/retrieve"
        response_body: "document"
      }
    };
  }
}
