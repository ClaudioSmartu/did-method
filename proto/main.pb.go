// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/main.proto

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		proto/main.proto

	It has these top-level messages:
		Pong
		Ticket
		Request
		Query
		Response
*/
package proto

import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/googleapis/google/api"
import google_protobuf1 "github.com/gogo/protobuf/types"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Request_Task int32

const (
	Request_PUBLISH    Request_Task = 0
	Request_DEACTIVATE Request_Task = 1
)

var Request_Task_name = map[int32]string{
	0: "PUBLISH",
	1: "DEACTIVATE",
}
var Request_Task_value = map[string]int32{
	"PUBLISH":    0,
	"DEACTIVATE": 1,
}

func (x Request_Task) String() string {
	return proto1.EnumName(Request_Task_name, int32(x))
}
func (Request_Task) EnumDescriptor() ([]byte, []int) { return fileDescriptorMain, []int{2, 0} }

// Generic ping response
type Pong struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptorMain, []int{0} }

func (m *Pong) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// Ticket required for write operations
type Ticket struct {
	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NonceValue int64  `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	KeyId      string `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Content    []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Signature  []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Ticket) Reset()                    { *m = Ticket{} }
func (*Ticket) ProtoMessage()               {}
func (*Ticket) Descriptor() ([]byte, []int) { return fileDescriptorMain, []int{1} }

func (m *Ticket) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Ticket) GetNonceValue() int64 {
	if m != nil {
		return m.NonceValue
	}
	return 0
}

func (m *Ticket) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *Ticket) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Ticket) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Write operation submitted for processing
type Request struct {
	Task   Request_Task `protobuf:"varint,1,opt,name=task,proto3,enum=io.bryk.did.Request_Task" json:"task,omitempty"`
	Ticket *Ticket      `protobuf:"bytes,2,opt,name=ticket" json:"ticket,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorMain, []int{2} }

func (m *Request) GetTask() Request_Task {
	if m != nil {
		return m.Task
	}
	return Request_PUBLISH
}

func (m *Request) GetTicket() *Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

// Read operation; retrieve the contents of a DID based on its subject string
type Query struct {
	Subject string `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptorMain, []int{3} }

func (m *Query) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

// Generic operation response
type Response struct {
	Ok       bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Contents []byte `protobuf:"bytes,2,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorMain, []int{4} }

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func init() {
	proto1.RegisterType((*Pong)(nil), "io.bryk.did.Pong")
	proto1.RegisterType((*Ticket)(nil), "io.bryk.did.Ticket")
	proto1.RegisterType((*Request)(nil), "io.bryk.did.Request")
	proto1.RegisterType((*Query)(nil), "io.bryk.did.Query")
	proto1.RegisterType((*Response)(nil), "io.bryk.did.Response")
	proto1.RegisterEnum("io.bryk.did.Request_Task", Request_Task_name, Request_Task_value)
}
func (this *Pong) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Pong)
	if !ok {
		that2, ok := that.(Pong)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Pong")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Pong but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Pong but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	return nil
}
func (this *Pong) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pong)
	if !ok {
		that2, ok := that.(Pong)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	return true
}
func (this *Ticket) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Ticket)
	if !ok {
		that2, ok := that.(Ticket)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Ticket")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Ticket but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Ticket but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.NonceValue != that1.NonceValue {
		return fmt.Errorf("NonceValue this(%v) Not Equal that(%v)", this.NonceValue, that1.NonceValue)
	}
	if this.KeyId != that1.KeyId {
		return fmt.Errorf("KeyId this(%v) Not Equal that(%v)", this.KeyId, that1.KeyId)
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	return nil
}
func (this *Ticket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ticket)
	if !ok {
		that2, ok := that.(Ticket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.NonceValue != that1.NonceValue {
		return false
	}
	if this.KeyId != that1.KeyId {
		return false
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *Request) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Request")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Request but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Request but is not nil && this == nil")
	}
	if this.Task != that1.Task {
		return fmt.Errorf("Task this(%v) Not Equal that(%v)", this.Task, that1.Task)
	}
	if !this.Ticket.Equal(that1.Ticket) {
		return fmt.Errorf("Ticket this(%v) Not Equal that(%v)", this.Ticket, that1.Ticket)
	}
	return nil
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Task != that1.Task {
		return false
	}
	if !this.Ticket.Equal(that1.Ticket) {
		return false
	}
	return true
}
func (this *Query) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Query)
	if !ok {
		that2, ok := that.(Query)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Query")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Query but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Query but is not nil && this == nil")
	}
	if this.Subject != that1.Subject {
		return fmt.Errorf("Subject this(%v) Not Equal that(%v)", this.Subject, that1.Subject)
	}
	return nil
}
func (this *Query) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Query)
	if !ok {
		that2, ok := that.(Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	return true
}
func (this *Response) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Response")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Response but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Response but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if !bytes.Equal(this.Contents, that1.Contents) {
		return fmt.Errorf("Contents this(%v) Not Equal that(%v)", this.Contents, that1.Contents)
	}
	return nil
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if !bytes.Equal(this.Contents, that1.Contents) {
		return false
	}
	return true
}
func (this *Pong) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.Pong{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ticket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.Ticket{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "NonceValue: "+fmt.Sprintf("%#v", this.NonceValue)+",\n")
	s = append(s, "KeyId: "+fmt.Sprintf("%#v", this.KeyId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Request{")
	s = append(s, "Task: "+fmt.Sprintf("%#v", this.Task)+",\n")
	if this.Ticket != nil {
		s = append(s, "Ticket: "+fmt.Sprintf("%#v", this.Ticket)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Query) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.Query{")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Response{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	s = append(s, "Contents: "+fmt.Sprintf("%#v", this.Contents)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMain(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Agent service

type AgentClient interface {
	// Reachability test
	Ping(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Pong, error)
	// Process an incoming request ticket
	Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Return the current state of a DID subject
	// The HTTP endpoint for this method is a custom handler function on the network agent
	Retrieve(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
}

type agentClient struct {
	cc *grpc.ClientConn
}

func NewAgentClient(cc *grpc.ClientConn) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Ping(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/io.bryk.did.Agent/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/io.bryk.did.Agent/Process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Retrieve(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/io.bryk.did.Agent/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Agent service

type AgentServer interface {
	// Reachability test
	Ping(context.Context, *google_protobuf1.Empty) (*Pong, error)
	// Process an incoming request ticket
	Process(context.Context, *Request) (*Response, error)
	// Return the current state of a DID subject
	// The HTTP endpoint for this method is a custom handler function on the network agent
	Retrieve(context.Context, *Query) (*Response, error)
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.bryk.did.Agent/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Ping(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.bryk.did.Agent/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Process(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.bryk.did.Agent/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Retrieve(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.bryk.did.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Agent_Ping_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _Agent_Process_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Agent_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}

func (m *Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pong) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Ticket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.Timestamp))
	}
	if m.NonceValue != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.NonceValue))
	}
	if len(m.KeyId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.KeyId)))
		i += copy(dAtA[i:], m.KeyId)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Task != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.Task))
	}
	if m.Ticket != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMain(dAtA, i, uint64(m.Ticket.Size()))
		n1, err := m.Ticket.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subject) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Subject)))
		i += copy(dAtA[i:], m.Subject)
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Contents) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMain(dAtA, i, uint64(len(m.Contents)))
		i += copy(dAtA[i:], m.Contents)
	}
	return i, nil
}

func encodeVarintMain(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedPong(r randyMain, easy bool) *Pong {
	this := &Pong{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTicket(r randyMain, easy bool) *Ticket {
	this := &Ticket{}
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.NonceValue = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.NonceValue *= -1
	}
	this.KeyId = string(randStringMain(r))
	v1 := r.Intn(100)
	this.Content = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Content[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.Signature = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequest(r randyMain, easy bool) *Request {
	this := &Request{}
	this.Task = Request_Task([]int32{0, 1}[r.Intn(2)])
	if r.Intn(10) != 0 {
		this.Ticket = NewPopulatedTicket(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedQuery(r randyMain, easy bool) *Query {
	this := &Query{}
	this.Subject = string(randStringMain(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResponse(r randyMain, easy bool) *Response {
	this := &Response{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	v3 := r.Intn(100)
	this.Contents = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Contents[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMain interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMain(r randyMain) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMain(r randyMain) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneMain(r)
	}
	return string(tmps)
}
func randUnrecognizedMain(r randyMain, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMain(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMain(dAtA []byte, r randyMain, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateMain(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMain(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMain(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Pong) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	return n
}

func (m *Ticket) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovMain(uint64(m.Timestamp))
	}
	if m.NonceValue != 0 {
		n += 1 + sovMain(uint64(m.NonceValue))
	}
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.Task != 0 {
		n += 1 + sovMain(uint64(m.Task))
	}
	if m.Ticket != nil {
		l = m.Ticket.Size()
		n += 1 + l + sovMain(uint64(l))
	}
	return n
}

func (m *Query) Size() (n int) {
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	l = len(m.Contents)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	return n
}

func sovMain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMain(x uint64) (n int) {
	return sovMain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Pong) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pong{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ticket) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ticket{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`NonceValue:` + fmt.Sprintf("%v", this.NonceValue) + `,`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request{`,
		`Task:` + fmt.Sprintf("%v", this.Task) + `,`,
		`Ticket:` + strings.Replace(fmt.Sprintf("%v", this.Ticket), "Ticket", "Ticket", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Query) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Query{`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`Contents:` + fmt.Sprintf("%v", this.Contents) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMain(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Pong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ticket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ticket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ticket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceValue", wireType)
			}
			m.NonceValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonceValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			m.Task = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Task |= (Request_Task(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ticket == nil {
				m.Ticket = &Ticket{}
			}
			if err := m.Ticket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents[:0], dAtA[iNdEx:postIndex]...)
			if m.Contents == nil {
				m.Contents = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMain   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("proto/main.proto", fileDescriptorMain) }

var fileDescriptorMain = []byte{
	// 560 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xee, 0xa5, 0x71, 0x92, 0xbe, 0xa9, 0xa2, 0xfc, 0xee, 0x47, 0x23, 0x13, 0x90, 0x09, 0x86,
	0x21, 0x02, 0xd5, 0x16, 0x41, 0x80, 0xc4, 0x96, 0x94, 0x20, 0x22, 0xa1, 0xca, 0x98, 0xd0, 0x81,
	0x05, 0x39, 0xce, 0x61, 0x0e, 0x37, 0x77, 0xc6, 0x77, 0xae, 0x94, 0x0d, 0x31, 0xb2, 0x32, 0xf2,
	0x05, 0xf8, 0x08, 0x8c, 0x8c, 0x8c, 0x48, 0x5d, 0x98, 0x50, 0x63, 0xf1, 0x01, 0x18, 0x19, 0x91,
	0xcf, 0x4e, 0xdb, 0x44, 0x30, 0xf9, 0xfd, 0xf3, 0x3c, 0xaf, 0xdf, 0xe7, 0x79, 0x75, 0xd0, 0x8c,
	0x62, 0x2e, 0xb9, 0x3d, 0xf3, 0x28, 0xb3, 0x54, 0x88, 0xeb, 0x94, 0x5b, 0x93, 0x78, 0x1e, 0x5a,
	0x53, 0x3a, 0x6d, 0xef, 0x06, 0x54, 0xbe, 0x4a, 0x26, 0x96, 0xcf, 0x67, 0x76, 0xc0, 0x03, 0x6e,
	0x2b, 0xcc, 0x24, 0x79, 0xa9, 0xb2, 0x9c, 0x9b, 0x45, 0x39, 0xb7, 0x7d, 0x6f, 0x1d, 0x1e, 0x70,
	0x1e, 0x1c, 0x12, 0x2f, 0xa2, 0xa2, 0x08, 0x6d, 0x2f, 0xa2, 0xb6, 0xc7, 0x18, 0x97, 0x9e, 0xa4,
	0x9c, 0x89, 0x82, 0x78, 0xa9, 0xe8, 0x9e, 0x8e, 0x27, 0xb3, 0x48, 0xce, 0xf3, 0xa6, 0xd9, 0x82,
	0xb2, 0xc3, 0x59, 0x80, 0x1b, 0x50, 0xe2, 0xa1, 0x8e, 0x3a, 0xa8, 0x5b, 0x73, 0x4b, 0x3c, 0x34,
	0x3f, 0x22, 0xa8, 0x8c, 0xa9, 0x1f, 0x12, 0x89, 0x2f, 0xc3, 0x96, 0xa4, 0x33, 0x22, 0xa4, 0x37,
	0x8b, 0x14, 0x62, 0xd3, 0x3d, 0x2b, 0xe0, 0xeb, 0xa0, 0x31, 0xce, 0x7c, 0xa2, 0x97, 0xb2, 0xce,
	0xa0, 0x91, 0xfe, 0xb8, 0x02, 0xfb, 0x59, 0xe1, 0xc0, 0x3b, 0x4c, 0x88, 0x9b, 0x37, 0xf1, 0x0e,
	0x54, 0x42, 0x32, 0x7f, 0x41, 0xa7, 0xfa, 0x66, 0x07, 0x75, 0xb7, 0x5c, 0x2d, 0x24, 0xf3, 0xd1,
	0x14, 0xeb, 0x50, 0xf5, 0x39, 0x93, 0x84, 0x49, 0xbd, 0xdc, 0x41, 0xdd, 0x6d, 0x77, 0x99, 0x66,
	0x3f, 0x15, 0x34, 0x60, 0x9e, 0x4c, 0x62, 0xa2, 0x6b, 0xaa, 0x77, 0x56, 0x30, 0xdf, 0x23, 0xa8,
	0xba, 0xe4, 0x4d, 0x42, 0x84, 0xc4, 0xbb, 0x50, 0x96, 0x9e, 0xc8, 0x77, 0x6f, 0xf4, 0x2e, 0x5a,
	0xe7, 0x2c, 0xb6, 0x0a, 0x8c, 0x35, 0xf6, 0x44, 0xe8, 0x2a, 0x18, 0xbe, 0x09, 0x15, 0xa9, 0x74,
	0xa9, 0x85, 0xeb, 0xbd, 0xff, 0x57, 0x08, 0xb9, 0x64, 0xb7, 0x80, 0x98, 0xd7, 0xa0, 0x9c, 0x51,
	0x71, 0x1d, 0xaa, 0xce, 0xb3, 0xc1, 0xe3, 0xd1, 0xd3, 0x47, 0xcd, 0x0d, 0xdc, 0x00, 0x78, 0x30,
	0xec, 0xef, 0x8d, 0x47, 0x07, 0xfd, 0xf1, 0xb0, 0x89, 0xcc, 0xab, 0xa0, 0x3d, 0x49, 0x48, 0x3c,
	0xcf, 0xd4, 0x88, 0x64, 0xf2, 0x9a, 0xf8, 0x52, 0x2d, 0xb3, 0xe5, 0x2e, 0x53, 0xf3, 0x2e, 0xd4,
	0x5c, 0x22, 0x22, 0xce, 0x04, 0x59, 0x77, 0x1a, 0xb7, 0xa1, 0x56, 0x88, 0x16, 0x6a, 0xa5, 0x6d,
	0xf7, 0x34, 0xef, 0x1d, 0x23, 0xd0, 0xfa, 0x41, 0xe6, 0xc7, 0x1e, 0x94, 0x1d, 0xca, 0x02, 0xdc,
	0xb2, 0xf2, 0x6b, 0x5a, 0xcb, 0x6b, 0x5a, 0xc3, 0xec, 0x9a, 0xed, 0xff, 0x56, 0x64, 0x64, 0x27,
	0x35, 0x9b, 0xef, 0x8e, 0x7f, 0x7e, 0x28, 0x01, 0xae, 0xd9, 0x47, 0xb7, 0xec, 0x28, 0x23, 0xef,
	0x43, 0xd5, 0x89, 0xb9, 0x4f, 0x84, 0xc0, 0x17, 0xfe, 0xe6, 0x53, 0x7b, 0x67, 0xad, 0x9a, 0xaf,
	0x6c, 0xb6, 0xd4, 0xa4, 0xa6, 0x59, 0x57, 0x93, 0xf2, 0x09, 0xf7, 0xd1, 0x0d, 0x7c, 0x27, 0x93,
	0x25, 0x63, 0x4a, 0x8e, 0x08, 0xc6, 0x2b, 0x54, 0x65, 0xc8, 0x3f, 0xc6, 0x0d, 0x1e, 0x7e, 0x5f,
	0x18, 0x1b, 0x27, 0x0b, 0x03, 0xfd, 0x5a, 0x18, 0xe8, 0xf7, 0xc2, 0x40, 0x6f, 0x53, 0x03, 0x7d,
	0x4a, 0x0d, 0xf4, 0x39, 0x35, 0xd0, 0x97, 0xd4, 0x40, 0x5f, 0x53, 0x03, 0x7d, 0x4b, 0x0d, 0x74,
	0x92, 0x1a, 0x08, 0xce, 0xbf, 0x99, 0x41, 0xc9, 0x19, 0x38, 0xe8, 0xb9, 0x96, 0x8b, 0xaf, 0xa8,
	0xcf, 0xed, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x34, 0x2b, 0x24, 0x22, 0x68, 0x03, 0x00, 0x00,
}
