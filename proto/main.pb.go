// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/main.proto

package didpb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Request_Task int32

const (
	Request_PUBLISH    Request_Task = 0
	Request_DEACTIVATE Request_Task = 1
)

var Request_Task_name = map[int32]string{
	0: "PUBLISH",
	1: "DEACTIVATE",
}

var Request_Task_value = map[string]int32{
	"PUBLISH":    0,
	"DEACTIVATE": 1,
}

func (x Request_Task) String() string {
	return proto.EnumName(Request_Task_name, int32(x))
}

func (Request_Task) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_098391ad7281b52b, []int{2, 0}
}

// Generic ping response
type Pong struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()      { *m = Pong{} }
func (*Pong) ProtoMessage() {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_098391ad7281b52b, []int{0}
}
func (m *Pong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return m.Size()
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// Ticket required for write operations
type Ticket struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NonceValue           int64    `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	KeyId                string   `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Content              []byte   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ticket) Reset()      { *m = Ticket{} }
func (*Ticket) ProtoMessage() {}
func (*Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_098391ad7281b52b, []int{1}
}
func (m *Ticket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket.Merge(m, src)
}
func (m *Ticket) XXX_Size() int {
	return m.Size()
}
func (m *Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket proto.InternalMessageInfo

func (m *Ticket) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Ticket) GetNonceValue() int64 {
	if m != nil {
		return m.NonceValue
	}
	return 0
}

func (m *Ticket) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *Ticket) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Ticket) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Write operation submitted for processing
type Request struct {
	Task                 Request_Task `protobuf:"varint,1,opt,name=task,proto3,enum=io.bryk.did.Request_Task" json:"task,omitempty"`
	Ticket               *Ticket      `protobuf:"bytes,2,opt,name=ticket,proto3" json:"ticket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Request) Reset()      { *m = Request{} }
func (*Request) ProtoMessage() {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_098391ad7281b52b, []int{2}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetTask() Request_Task {
	if m != nil {
		return m.Task
	}
	return Request_PUBLISH
}

func (m *Request) GetTicket() *Ticket {
	if m != nil {
		return m.Ticket
	}
	return nil
}

// Result of the processing request
type ProcessResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessResponse) Reset()      { *m = ProcessResponse{} }
func (*ProcessResponse) ProtoMessage() {}
func (*ProcessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_098391ad7281b52b, []int{3}
}
func (m *ProcessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessResponse.Merge(m, src)
}
func (m *ProcessResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessResponse proto.InternalMessageInfo

func (m *ProcessResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

// Read operation; retrieve the contents of a DID based on its subject string
type Query struct {
	Subject              string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()      { *m = Query{} }
func (*Query) ProtoMessage() {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_098391ad7281b52b, []int{4}
}
func (m *Query) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Query.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return m.Size()
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

// Retrieve operation response
type Response struct {
	Document             *Document `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Source               []byte    `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_098391ad7281b52b, []int{5}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetDocument() *Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *Response) GetSource() []byte {
	if m != nil {
		return m.Source
	}
	return nil
}

func init() {
	proto.RegisterEnum("io.bryk.did.Request_Task", Request_Task_name, Request_Task_value)
	proto.RegisterType((*Pong)(nil), "io.bryk.did.Pong")
	proto.RegisterType((*Ticket)(nil), "io.bryk.did.Ticket")
	proto.RegisterType((*Request)(nil), "io.bryk.did.Request")
	proto.RegisterType((*ProcessResponse)(nil), "io.bryk.did.ProcessResponse")
	proto.RegisterType((*Query)(nil), "io.bryk.did.Query")
	proto.RegisterType((*Response)(nil), "io.bryk.did.Response")
}

func init() { proto.RegisterFile("proto/main.proto", fileDescriptor_098391ad7281b52b) }

var fileDescriptor_098391ad7281b52b = []byte{
	// 638 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xbf, 0x6f, 0xd3, 0x4e,
	0x14, 0xef, 0xa5, 0xf9, 0x79, 0xa9, 0xd2, 0x7c, 0xef, 0xdb, 0x46, 0x26, 0x54, 0xa6, 0x35, 0x0c,
	0x15, 0xa8, 0xb6, 0x1a, 0x06, 0x24, 0xc4, 0x92, 0xb4, 0x95, 0x88, 0x04, 0xc8, 0x35, 0x69, 0x87,
	0x2e, 0xc8, 0x3f, 0x0e, 0x73, 0xb8, 0xbe, 0x33, 0xf6, 0xb9, 0x52, 0x84, 0x90, 0x10, 0x23, 0x2b,
	0x23, 0x13, 0x1b, 0x7f, 0x02, 0x23, 0x23, 0x23, 0x12, 0x0b, 0x13, 0x6a, 0x2c, 0xfe, 0x00, 0x46,
	0x46, 0xe4, 0xf3, 0x25, 0x4d, 0x0a, 0xdb, 0xbd, 0xf7, 0xf9, 0xbc, 0xcf, 0x7b, 0xef, 0x73, 0x0f,
	0xb6, 0xa3, 0x98, 0x71, 0x66, 0x84, 0x36, 0xa1, 0xba, 0x78, 0xa2, 0x26, 0x61, 0xba, 0x13, 0x8f,
	0x03, 0xdd, 0x23, 0x5e, 0xf7, 0x8e, 0x4f, 0xf8, 0xb3, 0xd4, 0xd1, 0x5d, 0x16, 0x1a, 0x3e, 0xf3,
	0x99, 0xe1, 0x33, 0xe6, 0x9f, 0x62, 0x3b, 0x22, 0x89, 0x7c, 0x1a, 0x76, 0x44, 0x0c, 0x9b, 0x52,
	0xc6, 0x6d, 0x4e, 0x18, 0x4d, 0x0a, 0x95, 0xee, 0xce, 0xe5, 0x42, 0x91, 0x76, 0xd2, 0xa7, 0x22,
	0x2a, 0x9a, 0xe6, 0x2f, 0x49, 0xbf, 0x2a, 0xc5, 0x66, 0x2c, 0x1c, 0x46, 0x7c, 0x2c, 0xc1, 0xb5,
	0x82, 0xee, 0x31, 0x37, 0x0d, 0x31, 0xe5, 0x45, 0x56, 0xeb, 0xc0, 0xb2, 0xc9, 0xa8, 0x8f, 0x5a,
	0xb0, 0xc4, 0x02, 0x05, 0x6c, 0x82, 0xed, 0xba, 0x55, 0x62, 0x81, 0xf6, 0x1e, 0xc0, 0xea, 0x88,
	0xb8, 0x01, 0xe6, 0x68, 0x03, 0x36, 0x38, 0x09, 0x71, 0xc2, 0xed, 0x30, 0x12, 0x8c, 0x65, 0xeb,
	0x22, 0x81, 0x6e, 0xc0, 0x0a, 0x65, 0xd4, 0xc5, 0x4a, 0x29, 0x47, 0x06, 0xad, 0xec, 0xc7, 0x35,
	0xf8, 0x28, 0x4f, 0x1c, 0xdb, 0xa7, 0x29, 0xb6, 0x0a, 0x10, 0xad, 0xc3, 0x6a, 0x80, 0xc7, 0x4f,
	0x88, 0xa7, 0x2c, 0x6f, 0x82, 0xed, 0x86, 0x55, 0x09, 0xf0, 0x78, 0xe8, 0x21, 0x05, 0xd6, 0x5c,
	0x46, 0x39, 0xa6, 0x5c, 0x29, 0x6f, 0x82, 0xed, 0x15, 0x6b, 0x1a, 0xe6, 0x4d, 0x13, 0xe2, 0x53,
	0x9b, 0xa7, 0x31, 0x56, 0x2a, 0x02, 0xbb, 0x48, 0x68, 0x6f, 0x01, 0xac, 0x59, 0xf8, 0x45, 0x8a,
	0x13, 0x8e, 0x76, 0x60, 0x99, 0xdb, 0x49, 0x31, 0x7b, 0xab, 0x77, 0x45, 0x9f, 0x33, 0x5e, 0x97,
	0x1c, 0x7d, 0x64, 0x27, 0x81, 0x25, 0x68, 0xe8, 0x16, 0xac, 0x72, 0xb1, 0x97, 0x18, 0xb8, 0xd9,
	0xfb, 0x7f, 0xa1, 0xa0, 0x58, 0xd9, 0x92, 0x14, 0xed, 0x3a, 0x2c, 0xe7, 0xa5, 0xa8, 0x09, 0x6b,
	0xe6, 0xd1, 0xe0, 0xc1, 0xf0, 0xf1, 0xfd, 0xf6, 0x12, 0x6a, 0x41, 0xb8, 0x7f, 0xd0, 0xdf, 0x1b,
	0x0d, 0x8f, 0xfb, 0xa3, 0x83, 0x36, 0xd0, 0xb6, 0xe0, 0xaa, 0x19, 0x33, 0x17, 0x27, 0x89, 0x85,
	0x93, 0x88, 0xd1, 0x04, 0xff, 0xe5, 0xe6, 0x16, 0xac, 0x1c, 0xa6, 0x38, 0x1e, 0xe7, 0x0b, 0x27,
	0xa9, 0xf3, 0x1c, 0xbb, 0x5c, 0xa0, 0x0d, 0x6b, 0x1a, 0x6a, 0x47, 0xb0, 0x3e, 0x2b, 0xdf, 0x85,
	0xf5, 0xe9, 0x37, 0x09, 0x5a, 0xb3, 0xb7, 0xbe, 0x30, 0xe5, 0xbe, 0x04, 0xad, 0x19, 0x0d, 0x75,
	0x60, 0x35, 0x61, 0x69, 0x2c, 0xff, 0x61, 0xc5, 0x92, 0x51, 0xef, 0x43, 0x09, 0xd6, 0xfb, 0x3e,
	0xa6, 0xbc, 0x6f, 0x0e, 0xd1, 0x1e, 0x2c, 0x9b, 0x84, 0xfa, 0xa8, 0xa3, 0x17, 0x87, 0xa2, 0x4f,
	0x0f, 0x45, 0x3f, 0xc8, 0x0f, 0xa5, 0xfb, 0xdf, 0x42, 0x97, 0xfc, 0x2e, 0xb4, 0xf6, 0x9b, 0x6f,
	0x3f, 0xdf, 0x95, 0x20, 0xaa, 0x1b, 0x67, 0xbb, 0x46, 0x94, 0x17, 0x1f, 0xc1, 0x9a, 0x5c, 0x17,
	0xad, 0xfd, 0xcb, 0xec, 0xee, 0xc6, 0xa2, 0xca, 0xa2, 0x35, 0x5a, 0x47, 0x08, 0xb6, 0xb5, 0xa6,
	0x10, 0x2c, 0xc0, 0xbb, 0xe0, 0x26, 0x1a, 0xe7, 0xfb, 0xf3, 0x98, 0xe0, 0x33, 0x8c, 0xd0, 0x82,
	0x82, 0x70, 0xae, 0xbb, 0x7e, 0xa9, 0x97, 0x94, 0x1b, 0x08, 0xb9, 0x7b, 0xa8, 0x93, 0xcb, 0xc5,
	0x52, 0xc0, 0x78, 0x29, 0x5d, 0x7d, 0x75, 0xa2, 0xa0, 0x95, 0x79, 0xc4, 0x99, 0x39, 0x76, 0xf1,
	0x1a, 0x1c, 0x7e, 0x9f, 0xa8, 0x4b, 0xe7, 0x13, 0x15, 0xfc, 0x9a, 0xa8, 0xe0, 0xf7, 0x44, 0x05,
	0xaf, 0x33, 0x15, 0x7c, 0xcc, 0x54, 0xf0, 0x29, 0x53, 0xc1, 0xe7, 0x4c, 0x05, 0x5f, 0x32, 0x15,
	0x7c, 0xcd, 0x54, 0x70, 0x9e, 0xa9, 0x00, 0xae, 0xba, 0x2c, 0x9c, 0x9f, 0x65, 0xd0, 0x78, 0x68,
	0x13, 0x6a, 0xe6, 0x4e, 0x9a, 0xe0, 0xa4, 0xe2, 0x11, 0x2f, 0x72, 0x9c, 0xaa, 0x70, 0xf6, 0xf6,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0xba, 0x97, 0x82, 0x19, 0x04, 0x00, 0x00,
}

func (this *Pong) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Pong)
	if !ok {
		that2, ok := that.(Pong)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Pong")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Pong but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Pong but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Pong) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pong)
	if !ok {
		that2, ok := that.(Pong)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Ticket) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Ticket)
	if !ok {
		that2, ok := that.(Ticket)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Ticket")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Ticket but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Ticket but is not nil && this == nil")
	}
	if this.Timestamp != that1.Timestamp {
		return fmt.Errorf("Timestamp this(%v) Not Equal that(%v)", this.Timestamp, that1.Timestamp)
	}
	if this.NonceValue != that1.NonceValue {
		return fmt.Errorf("NonceValue this(%v) Not Equal that(%v)", this.NonceValue, that1.NonceValue)
	}
	if this.KeyId != that1.KeyId {
		return fmt.Errorf("KeyId this(%v) Not Equal that(%v)", this.KeyId, that1.KeyId)
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return fmt.Errorf("Content this(%v) Not Equal that(%v)", this.Content, that1.Content)
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return fmt.Errorf("Signature this(%v) Not Equal that(%v)", this.Signature, that1.Signature)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Ticket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ticket)
	if !ok {
		that2, ok := that.(Ticket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.NonceValue != that1.NonceValue {
		return false
	}
	if this.KeyId != that1.KeyId {
		return false
	}
	if !bytes.Equal(this.Content, that1.Content) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Request) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Request")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Request but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Request but is not nil && this == nil")
	}
	if this.Task != that1.Task {
		return fmt.Errorf("Task this(%v) Not Equal that(%v)", this.Task, that1.Task)
	}
	if !this.Ticket.Equal(that1.Ticket) {
		return fmt.Errorf("Ticket this(%v) Not Equal that(%v)", this.Ticket, that1.Ticket)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Task != that1.Task {
		return false
	}
	if !this.Ticket.Equal(that1.Ticket) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ProcessResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ProcessResponse)
	if !ok {
		that2, ok := that.(ProcessResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ProcessResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ProcessResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ProcessResponse but is not nil && this == nil")
	}
	if this.Ok != that1.Ok {
		return fmt.Errorf("Ok this(%v) Not Equal that(%v)", this.Ok, that1.Ok)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ProcessResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessResponse)
	if !ok {
		that2, ok := that.(ProcessResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Ok != that1.Ok {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Query) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Query)
	if !ok {
		that2, ok := that.(Query)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Query")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Query but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Query but is not nil && this == nil")
	}
	if this.Subject != that1.Subject {
		return fmt.Errorf("Subject this(%v) Not Equal that(%v)", this.Subject, that1.Subject)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Query) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Query)
	if !ok {
		that2, ok := that.(Query)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Response) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Response")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Response but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Response but is not nil && this == nil")
	}
	if !this.Document.Equal(that1.Document) {
		return fmt.Errorf("Document this(%v) Not Equal that(%v)", this.Document, that1.Document)
	}
	if !bytes.Equal(this.Source, that1.Source) {
		return fmt.Errorf("Source this(%v) Not Equal that(%v)", this.Source, that1.Source)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Document.Equal(that1.Document) {
		return false
	}
	if !bytes.Equal(this.Source, that1.Source) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Pong) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&didpb.Pong{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Ticket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&didpb.Ticket{")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "NonceValue: "+fmt.Sprintf("%#v", this.NonceValue)+",\n")
	s = append(s, "KeyId: "+fmt.Sprintf("%#v", this.KeyId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&didpb.Request{")
	s = append(s, "Task: "+fmt.Sprintf("%#v", this.Task)+",\n")
	if this.Ticket != nil {
		s = append(s, "Ticket: "+fmt.Sprintf("%#v", this.Ticket)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&didpb.ProcessResponse{")
	s = append(s, "Ok: "+fmt.Sprintf("%#v", this.Ok)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Query) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&didpb.Query{")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&didpb.Response{")
	if this.Document != nil {
		s = append(s, "Document: "+fmt.Sprintf("%#v", this.Document)+",\n")
	}
	s = append(s, "Source: "+fmt.Sprintf("%#v", this.Source)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMain(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AgentAPIClient is the client API for AgentAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentAPIClient interface {
	// Reachability test.
	Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Pong, error)
	// Process an incoming request ticket.
	Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ProcessResponse, error)
	// Return the current state of a DID subject.
	Retrieve(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error)
}

type agentAPIClient struct {
	cc *grpc.ClientConn
}

func NewAgentAPIClient(cc *grpc.ClientConn) AgentAPIClient {
	return &agentAPIClient{cc}
}

func (c *agentAPIClient) Ping(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/io.bryk.did.AgentAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ProcessResponse, error) {
	out := new(ProcessResponse)
	err := c.cc.Invoke(ctx, "/io.bryk.did.AgentAPI/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) Retrieve(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/io.bryk.did.AgentAPI/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentAPIServer is the server API for AgentAPI service.
type AgentAPIServer interface {
	// Reachability test.
	Ping(context.Context, *types.Empty) (*Pong, error)
	// Process an incoming request ticket.
	Process(context.Context, *Request) (*ProcessResponse, error)
	// Return the current state of a DID subject.
	Retrieve(context.Context, *Query) (*Response, error)
}

// UnimplementedAgentAPIServer can be embedded to have forward compatible implementations.
type UnimplementedAgentAPIServer struct {
}

func (*UnimplementedAgentAPIServer) Ping(ctx context.Context, req *types.Empty) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedAgentAPIServer) Process(ctx context.Context, req *Request) (*ProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (*UnimplementedAgentAPIServer) Retrieve(ctx context.Context, req *Query) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}

func RegisterAgentAPIServer(s *grpc.Server, srv AgentAPIServer) {
	s.RegisterService(&_AgentAPI_serviceDesc, srv)
}

func _AgentAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.bryk.did.AgentAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Ping(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.bryk.did.AgentAPI/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Process(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.bryk.did.AgentAPI/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Retrieve(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.bryk.did.AgentAPI",
	HandlerType: (*AgentAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _AgentAPI_Ping_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _AgentAPI_Process_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _AgentAPI_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}

func (m *Pong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ticket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ticket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMain(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMain(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintMain(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.NonceValue != 0 {
		i = encodeVarintMain(dAtA, i, uint64(m.NonceValue))
		i--
		dAtA[i] = 0x10
	}
	if m.Timestamp != 0 {
		i = encodeVarintMain(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ticket != nil {
		{
			size, err := m.Ticket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Task != 0 {
		i = encodeVarintMain(dAtA, i, uint64(m.Task))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Query) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Query) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Query) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintMain(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintMain(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMain(dAtA []byte, offset int, v uint64) int {
	offset -= sovMain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPong(r randyMain, easy bool) *Pong {
	this := &Pong{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMain(r, 2)
	}
	return this
}

func NewPopulatedTicket(r randyMain, easy bool) *Ticket {
	this := &Ticket{}
	this.Timestamp = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Timestamp *= -1
	}
	this.NonceValue = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.NonceValue *= -1
	}
	this.KeyId = string(randStringMain(r))
	v1 := r.Intn(100)
	this.Content = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Content[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.Signature = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Signature[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMain(r, 6)
	}
	return this
}

func NewPopulatedRequest(r randyMain, easy bool) *Request {
	this := &Request{}
	this.Task = Request_Task([]int32{0, 1}[r.Intn(2)])
	if r.Intn(5) != 0 {
		this.Ticket = NewPopulatedTicket(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMain(r, 3)
	}
	return this
}

func NewPopulatedProcessResponse(r randyMain, easy bool) *ProcessResponse {
	this := &ProcessResponse{}
	this.Ok = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMain(r, 2)
	}
	return this
}

func NewPopulatedQuery(r randyMain, easy bool) *Query {
	this := &Query{}
	this.Subject = string(randStringMain(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMain(r, 2)
	}
	return this
}

func NewPopulatedResponse(r randyMain, easy bool) *Response {
	this := &Response{}
	if r.Intn(5) != 0 {
		this.Document = NewPopulatedDocument(r, easy)
	}
	v3 := r.Intn(100)
	this.Source = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Source[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMain(r, 3)
	}
	return this
}

type randyMain interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMain(r randyMain) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMain(r randyMain) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneMain(r)
	}
	return string(tmps)
}
func randUnrecognizedMain(r randyMain, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMain(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMain(dAtA []byte, r randyMain, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateMain(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMain(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMain(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMain(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Pong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ticket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovMain(uint64(m.Timestamp))
	}
	if m.NonceValue != 0 {
		n += 1 + sovMain(uint64(m.NonceValue))
	}
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Task != 0 {
		n += 1 + sovMain(uint64(m.Task))
	}
	if m.Ticket != nil {
		l = m.Ticket.Size()
		n += 1 + l + sovMain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProcessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Query) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovMain(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovMain(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMain(x uint64) (n int) {
	return sovMain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Pong) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pong{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ticket) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ticket{`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`NonceValue:` + fmt.Sprintf("%v", this.NonceValue) + `,`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request{`,
		`Task:` + fmt.Sprintf("%v", this.Task) + `,`,
		`Ticket:` + strings.Replace(this.Ticket.String(), "Ticket", "Ticket", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessResponse{`,
		`Ok:` + fmt.Sprintf("%v", this.Ok) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Query) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Query{`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Document:` + strings.Replace(fmt.Sprintf("%v", this.Document), "Document", "Document", 1) + `,`,
		`Source:` + fmt.Sprintf("%v", this.Source) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMain(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Pong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ticket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ticket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ticket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceValue", wireType)
			}
			m.NonceValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NonceValue |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Task", wireType)
			}
			m.Task = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Task |= Request_Task(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ticket == nil {
				m.Ticket = &Ticket{}
			}
			if err := m.Ticket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Query) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Query: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Query: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &Document{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMain
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = append(m.Source[:0], dAtA[iNdEx:postIndex]...)
			if m.Source == nil {
				m.Source = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMain = fmt.Errorf("proto: unexpected end of group")
)
